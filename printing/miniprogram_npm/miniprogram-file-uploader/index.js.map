{"version":3,"sources":["uploader.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\r\n/**\r\n * miniprogram-uploader 1.0.0\r\n * description: A JavaScript library supports miniprogram to upload large file.\r\n * author: sanfordsun\r\n * Released under the MIT License.\r\n */\r\n\r\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n\r\nfunction createCommonjsModule(fn, basedir, module) {\r\n\treturn module = {\r\n\t  path: basedir,\r\n\t  exports: {},\r\n\t  require: function (path, base) {\r\n      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\r\n    }\r\n\t}, fn(module, module.exports), module.exports;\r\n}\r\n\r\nfunction commonjsRequire () {\r\n\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\r\n}\r\n\r\nvar logger = createCommonjsModule(function (module) {\r\n/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.6.0\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.TRACE = defineLogLevel(1, 'TRACE');\r\n\tLogger.DEBUG = defineLogLevel(2, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(3, 'INFO');\r\n\tLogger.TIME = defineLogLevel(4, 'TIME');\r\n\tLogger.WARN = defineLogLevel(5, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Gets the current logging level for the logging instance\r\n\t\tgetLevel: function () {\r\n\t\t\treturn this.context.filterLevel;\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\ttrace: function () {\r\n\t\t\tthis.invoke(Logger.TRACE, arguments);\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.trace = bind(globalLogger, globalLogger.trace);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Gets the global logging filter level\r\n\tLogger.getLevel = function() {\r\n\t\treturn globalLogger.getLevel();\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t} else if (context.level === Logger.DEBUG && console.debug) {\r\n\t\t\t\t\thdlr = console.debug;\r\n\t\t\t\t} else if (context.level === Logger.TRACE && console.trace) {\r\n\t\t\t\t\thdlr = console.trace;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif ( module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(commonjsGlobal));\r\n});\r\n\r\nvar sparkMd5 = createCommonjsModule(function (module, exports) {\r\n(function (factory) {\r\n    {\r\n        // Node/CommonJS\r\n        module.exports = factory();\r\n    }\r\n}(function (undefined$1) {\r\n\r\n    /*\r\n     * Fastest md5 implementation around (JKM md5).\r\n     * Credits: Joseph Myers\r\n     *\r\n     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\r\n     * @see http://jsperf.com/md5-shootout/7\r\n     */\r\n\r\n    /* this function is much faster,\r\n      so if possible we use it. Some IEs\r\n      are the only ones I know of that\r\n      need the idiotic second function,\r\n      generated by an if clause.  */\r\n    var hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\r\n\r\n    function md5cycle(x, k) {\r\n        var a = x[0],\r\n            b = x[1],\r\n            c = x[2],\r\n            d = x[3];\r\n\r\n        a += (b & c | ~b & d) + k[0] - 680876936 | 0;\r\n        a  = (a << 7 | a >>> 25) + b | 0;\r\n        d += (a & b | ~a & c) + k[1] - 389564586 | 0;\r\n        d  = (d << 12 | d >>> 20) + a | 0;\r\n        c += (d & a | ~d & b) + k[2] + 606105819 | 0;\r\n        c  = (c << 17 | c >>> 15) + d | 0;\r\n        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;\r\n        b  = (b << 22 | b >>> 10) + c | 0;\r\n        a += (b & c | ~b & d) + k[4] - 176418897 | 0;\r\n        a  = (a << 7 | a >>> 25) + b | 0;\r\n        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;\r\n        d  = (d << 12 | d >>> 20) + a | 0;\r\n        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;\r\n        c  = (c << 17 | c >>> 15) + d | 0;\r\n        b += (c & d | ~c & a) + k[7] - 45705983 | 0;\r\n        b  = (b << 22 | b >>> 10) + c | 0;\r\n        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;\r\n        a  = (a << 7 | a >>> 25) + b | 0;\r\n        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;\r\n        d  = (d << 12 | d >>> 20) + a | 0;\r\n        c += (d & a | ~d & b) + k[10] - 42063 | 0;\r\n        c  = (c << 17 | c >>> 15) + d | 0;\r\n        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;\r\n        b  = (b << 22 | b >>> 10) + c | 0;\r\n        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;\r\n        a  = (a << 7 | a >>> 25) + b | 0;\r\n        d += (a & b | ~a & c) + k[13] - 40341101 | 0;\r\n        d  = (d << 12 | d >>> 20) + a | 0;\r\n        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;\r\n        c  = (c << 17 | c >>> 15) + d | 0;\r\n        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;\r\n        b  = (b << 22 | b >>> 10) + c | 0;\r\n\r\n        a += (b & d | c & ~d) + k[1] - 165796510 | 0;\r\n        a  = (a << 5 | a >>> 27) + b | 0;\r\n        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;\r\n        d  = (d << 9 | d >>> 23) + a | 0;\r\n        c += (d & b | a & ~b) + k[11] + 643717713 | 0;\r\n        c  = (c << 14 | c >>> 18) + d | 0;\r\n        b += (c & a | d & ~a) + k[0] - 373897302 | 0;\r\n        b  = (b << 20 | b >>> 12) + c | 0;\r\n        a += (b & d | c & ~d) + k[5] - 701558691 | 0;\r\n        a  = (a << 5 | a >>> 27) + b | 0;\r\n        d += (a & c | b & ~c) + k[10] + 38016083 | 0;\r\n        d  = (d << 9 | d >>> 23) + a | 0;\r\n        c += (d & b | a & ~b) + k[15] - 660478335 | 0;\r\n        c  = (c << 14 | c >>> 18) + d | 0;\r\n        b += (c & a | d & ~a) + k[4] - 405537848 | 0;\r\n        b  = (b << 20 | b >>> 12) + c | 0;\r\n        a += (b & d | c & ~d) + k[9] + 568446438 | 0;\r\n        a  = (a << 5 | a >>> 27) + b | 0;\r\n        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;\r\n        d  = (d << 9 | d >>> 23) + a | 0;\r\n        c += (d & b | a & ~b) + k[3] - 187363961 | 0;\r\n        c  = (c << 14 | c >>> 18) + d | 0;\r\n        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;\r\n        b  = (b << 20 | b >>> 12) + c | 0;\r\n        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;\r\n        a  = (a << 5 | a >>> 27) + b | 0;\r\n        d += (a & c | b & ~c) + k[2] - 51403784 | 0;\r\n        d  = (d << 9 | d >>> 23) + a | 0;\r\n        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;\r\n        c  = (c << 14 | c >>> 18) + d | 0;\r\n        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;\r\n        b  = (b << 20 | b >>> 12) + c | 0;\r\n\r\n        a += (b ^ c ^ d) + k[5] - 378558 | 0;\r\n        a  = (a << 4 | a >>> 28) + b | 0;\r\n        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;\r\n        d  = (d << 11 | d >>> 21) + a | 0;\r\n        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;\r\n        c  = (c << 16 | c >>> 16) + d | 0;\r\n        b += (c ^ d ^ a) + k[14] - 35309556 | 0;\r\n        b  = (b << 23 | b >>> 9) + c | 0;\r\n        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;\r\n        a  = (a << 4 | a >>> 28) + b | 0;\r\n        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;\r\n        d  = (d << 11 | d >>> 21) + a | 0;\r\n        c += (d ^ a ^ b) + k[7] - 155497632 | 0;\r\n        c  = (c << 16 | c >>> 16) + d | 0;\r\n        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;\r\n        b  = (b << 23 | b >>> 9) + c | 0;\r\n        a += (b ^ c ^ d) + k[13] + 681279174 | 0;\r\n        a  = (a << 4 | a >>> 28) + b | 0;\r\n        d += (a ^ b ^ c) + k[0] - 358537222 | 0;\r\n        d  = (d << 11 | d >>> 21) + a | 0;\r\n        c += (d ^ a ^ b) + k[3] - 722521979 | 0;\r\n        c  = (c << 16 | c >>> 16) + d | 0;\r\n        b += (c ^ d ^ a) + k[6] + 76029189 | 0;\r\n        b  = (b << 23 | b >>> 9) + c | 0;\r\n        a += (b ^ c ^ d) + k[9] - 640364487 | 0;\r\n        a  = (a << 4 | a >>> 28) + b | 0;\r\n        d += (a ^ b ^ c) + k[12] - 421815835 | 0;\r\n        d  = (d << 11 | d >>> 21) + a | 0;\r\n        c += (d ^ a ^ b) + k[15] + 530742520 | 0;\r\n        c  = (c << 16 | c >>> 16) + d | 0;\r\n        b += (c ^ d ^ a) + k[2] - 995338651 | 0;\r\n        b  = (b << 23 | b >>> 9) + c | 0;\r\n\r\n        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;\r\n        a  = (a << 6 | a >>> 26) + b | 0;\r\n        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;\r\n        d  = (d << 10 | d >>> 22) + a | 0;\r\n        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;\r\n        c  = (c << 15 | c >>> 17) + d | 0;\r\n        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;\r\n        b  = (b << 21 |b >>> 11) + c | 0;\r\n        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;\r\n        a  = (a << 6 | a >>> 26) + b | 0;\r\n        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;\r\n        d  = (d << 10 | d >>> 22) + a | 0;\r\n        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;\r\n        c  = (c << 15 | c >>> 17) + d | 0;\r\n        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;\r\n        b  = (b << 21 |b >>> 11) + c | 0;\r\n        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;\r\n        a  = (a << 6 | a >>> 26) + b | 0;\r\n        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;\r\n        d  = (d << 10 | d >>> 22) + a | 0;\r\n        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;\r\n        c  = (c << 15 | c >>> 17) + d | 0;\r\n        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;\r\n        b  = (b << 21 |b >>> 11) + c | 0;\r\n        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;\r\n        a  = (a << 6 | a >>> 26) + b | 0;\r\n        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;\r\n        d  = (d << 10 | d >>> 22) + a | 0;\r\n        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;\r\n        c  = (c << 15 | c >>> 17) + d | 0;\r\n        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;\r\n        b  = (b << 21 | b >>> 11) + c | 0;\r\n\r\n        x[0] = a + x[0] | 0;\r\n        x[1] = b + x[1] | 0;\r\n        x[2] = c + x[2] | 0;\r\n        x[3] = d + x[3] | 0;\r\n    }\r\n\r\n    function md5blk(s) {\r\n        var md5blks = [],\r\n            i; /* Andy King said do it this way. */\r\n\r\n        for (i = 0; i < 64; i += 4) {\r\n            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\r\n        }\r\n        return md5blks;\r\n    }\r\n\r\n    function md5blk_array(a) {\r\n        var md5blks = [],\r\n            i; /* Andy King said do it this way. */\r\n\r\n        for (i = 0; i < 64; i += 4) {\r\n            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\r\n        }\r\n        return md5blks;\r\n    }\r\n\r\n    function md51(s) {\r\n        var n = s.length,\r\n            state = [1732584193, -271733879, -1732584194, 271733878],\r\n            i,\r\n            length,\r\n            tail,\r\n            tmp,\r\n            lo,\r\n            hi;\r\n\r\n        for (i = 64; i <= n; i += 64) {\r\n            md5cycle(state, md5blk(s.substring(i - 64, i)));\r\n        }\r\n        s = s.substring(i - 64);\r\n        length = s.length;\r\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        for (i = 0; i < length; i += 1) {\r\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\r\n        }\r\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\r\n        if (i > 55) {\r\n            md5cycle(state, tail);\r\n            for (i = 0; i < 16; i += 1) {\r\n                tail[i] = 0;\r\n            }\r\n        }\r\n\r\n        // Beware that the final length might not fit in 32 bits so we take care of that\r\n        tmp = n * 8;\r\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\r\n        lo = parseInt(tmp[2], 16);\r\n        hi = parseInt(tmp[1], 16) || 0;\r\n\r\n        tail[14] = lo;\r\n        tail[15] = hi;\r\n\r\n        md5cycle(state, tail);\r\n        return state;\r\n    }\r\n\r\n    function md51_array(a) {\r\n        var n = a.length,\r\n            state = [1732584193, -271733879, -1732584194, 271733878],\r\n            i,\r\n            length,\r\n            tail,\r\n            tmp,\r\n            lo,\r\n            hi;\r\n\r\n        for (i = 64; i <= n; i += 64) {\r\n            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\r\n        }\r\n\r\n        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\r\n        // containing the last element of the parent array if the sub array specified starts\r\n        // beyond the length of the parent array - weird.\r\n        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\r\n        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\r\n\r\n        length = a.length;\r\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        for (i = 0; i < length; i += 1) {\r\n            tail[i >> 2] |= a[i] << ((i % 4) << 3);\r\n        }\r\n\r\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\r\n        if (i > 55) {\r\n            md5cycle(state, tail);\r\n            for (i = 0; i < 16; i += 1) {\r\n                tail[i] = 0;\r\n            }\r\n        }\r\n\r\n        // Beware that the final length might not fit in 32 bits so we take care of that\r\n        tmp = n * 8;\r\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\r\n        lo = parseInt(tmp[2], 16);\r\n        hi = parseInt(tmp[1], 16) || 0;\r\n\r\n        tail[14] = lo;\r\n        tail[15] = hi;\r\n\r\n        md5cycle(state, tail);\r\n\r\n        return state;\r\n    }\r\n\r\n    function rhex(n) {\r\n        var s = '',\r\n            j;\r\n        for (j = 0; j < 4; j += 1) {\r\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\r\n        }\r\n        return s;\r\n    }\r\n\r\n    function hex(x) {\r\n        var i;\r\n        for (i = 0; i < x.length; i += 1) {\r\n            x[i] = rhex(x[i]);\r\n        }\r\n        return x.join('');\r\n    }\r\n\r\n    // In some cases the fast add32 function cannot be used..\r\n    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') ;\r\n\r\n    // ---------------------------------------------------\r\n\r\n    /**\r\n     * ArrayBuffer slice polyfill.\r\n     *\r\n     * @see https://github.com/ttaubert/node-arraybuffer-slice\r\n     */\r\n\r\n    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\r\n        (function () {\r\n            function clamp(val, length) {\r\n                val = (val | 0) || 0;\r\n\r\n                if (val < 0) {\r\n                    return Math.max(val + length, 0);\r\n                }\r\n\r\n                return Math.min(val, length);\r\n            }\r\n\r\n            ArrayBuffer.prototype.slice = function (from, to) {\r\n                var length = this.byteLength,\r\n                    begin = clamp(from, length),\r\n                    end = length,\r\n                    num,\r\n                    target,\r\n                    targetArray,\r\n                    sourceArray;\r\n\r\n                if (to !== undefined$1) {\r\n                    end = clamp(to, length);\r\n                }\r\n\r\n                if (begin > end) {\r\n                    return new ArrayBuffer(0);\r\n                }\r\n\r\n                num = end - begin;\r\n                target = new ArrayBuffer(num);\r\n                targetArray = new Uint8Array(target);\r\n\r\n                sourceArray = new Uint8Array(this, begin, num);\r\n                targetArray.set(sourceArray);\r\n\r\n                return target;\r\n            };\r\n        })();\r\n    }\r\n\r\n    // ---------------------------------------------------\r\n\r\n    /**\r\n     * Helpers.\r\n     */\r\n\r\n    function toUtf8(str) {\r\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\r\n            str = unescape(encodeURIComponent(str));\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    function utf8Str2ArrayBuffer(str, returnUInt8Array) {\r\n        var length = str.length,\r\n           buff = new ArrayBuffer(length),\r\n           arr = new Uint8Array(buff),\r\n           i;\r\n\r\n        for (i = 0; i < length; i += 1) {\r\n            arr[i] = str.charCodeAt(i);\r\n        }\r\n\r\n        return returnUInt8Array ? arr : buff;\r\n    }\r\n\r\n    function arrayBuffer2Utf8Str(buff) {\r\n        return String.fromCharCode.apply(null, new Uint8Array(buff));\r\n    }\r\n\r\n    function concatenateArrayBuffers(first, second, returnUInt8Array) {\r\n        var result = new Uint8Array(first.byteLength + second.byteLength);\r\n\r\n        result.set(new Uint8Array(first));\r\n        result.set(new Uint8Array(second), first.byteLength);\r\n\r\n        return returnUInt8Array ? result : result.buffer;\r\n    }\r\n\r\n    function hexToBinaryString(hex) {\r\n        var bytes = [],\r\n            length = hex.length,\r\n            x;\r\n\r\n        for (x = 0; x < length - 1; x += 2) {\r\n            bytes.push(parseInt(hex.substr(x, 2), 16));\r\n        }\r\n\r\n        return String.fromCharCode.apply(String, bytes);\r\n    }\r\n\r\n    // ---------------------------------------------------\r\n\r\n    /**\r\n     * SparkMD5 OOP implementation.\r\n     *\r\n     * Use this class to perform an incremental md5, otherwise use the\r\n     * static methods instead.\r\n     */\r\n\r\n    function SparkMD5() {\r\n        // call reset to init the instance\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Appends a string.\r\n     * A conversion will be applied if an utf8 string is detected.\r\n     *\r\n     * @param {String} str The string to be appended\r\n     *\r\n     * @return {SparkMD5} The instance itself\r\n     */\r\n    SparkMD5.prototype.append = function (str) {\r\n        // Converts the string to utf8 bytes if necessary\r\n        // Then append as binary\r\n        this.appendBinary(toUtf8(str));\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Appends a binary string.\r\n     *\r\n     * @param {String} contents The binary string to be appended\r\n     *\r\n     * @return {SparkMD5} The instance itself\r\n     */\r\n    SparkMD5.prototype.appendBinary = function (contents) {\r\n        this._buff += contents;\r\n        this._length += contents.length;\r\n\r\n        var length = this._buff.length,\r\n            i;\r\n\r\n        for (i = 64; i <= length; i += 64) {\r\n            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\r\n        }\r\n\r\n        this._buff = this._buff.substring(i - 64);\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Finishes the incremental computation, reseting the internal state and\r\n     * returning the result.\r\n     *\r\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.prototype.end = function (raw) {\r\n        var buff = this._buff,\r\n            length = buff.length,\r\n            i,\r\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ret;\r\n\r\n        for (i = 0; i < length; i += 1) {\r\n            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\r\n        }\r\n\r\n        this._finish(tail, length);\r\n        ret = hex(this._hash);\r\n\r\n        if (raw) {\r\n            ret = hexToBinaryString(ret);\r\n        }\r\n\r\n        this.reset();\r\n\r\n        return ret;\r\n    };\r\n\r\n    /**\r\n     * Resets the internal state of the computation.\r\n     *\r\n     * @return {SparkMD5} The instance itself\r\n     */\r\n    SparkMD5.prototype.reset = function () {\r\n        this._buff = '';\r\n        this._length = 0;\r\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Gets the internal state of the computation.\r\n     *\r\n     * @return {Object} The state\r\n     */\r\n    SparkMD5.prototype.getState = function () {\r\n        return {\r\n            buff: this._buff,\r\n            length: this._length,\r\n            hash: this._hash.slice()\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Gets the internal state of the computation.\r\n     *\r\n     * @param {Object} state The state\r\n     *\r\n     * @return {SparkMD5} The instance itself\r\n     */\r\n    SparkMD5.prototype.setState = function (state) {\r\n        this._buff = state.buff;\r\n        this._length = state.length;\r\n        this._hash = state.hash;\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Releases memory used by the incremental buffer and other additional\r\n     * resources. If you plan to use the instance again, use reset instead.\r\n     */\r\n    SparkMD5.prototype.destroy = function () {\r\n        delete this._hash;\r\n        delete this._buff;\r\n        delete this._length;\r\n    };\r\n\r\n    /**\r\n     * Finish the final calculation based on the tail.\r\n     *\r\n     * @param {Array}  tail   The tail (will be modified)\r\n     * @param {Number} length The length of the remaining buffer\r\n     */\r\n    SparkMD5.prototype._finish = function (tail, length) {\r\n        var i = length,\r\n            tmp,\r\n            lo,\r\n            hi;\r\n\r\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\r\n        if (i > 55) {\r\n            md5cycle(this._hash, tail);\r\n            for (i = 0; i < 16; i += 1) {\r\n                tail[i] = 0;\r\n            }\r\n        }\r\n\r\n        // Do the final computation based on the tail and length\r\n        // Beware that the final length may not fit in 32 bits so we take care of that\r\n        tmp = this._length * 8;\r\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\r\n        lo = parseInt(tmp[2], 16);\r\n        hi = parseInt(tmp[1], 16) || 0;\r\n\r\n        tail[14] = lo;\r\n        tail[15] = hi;\r\n        md5cycle(this._hash, tail);\r\n    };\r\n\r\n    /**\r\n     * Performs the md5 hash on a string.\r\n     * A conversion will be applied if utf8 string is detected.\r\n     *\r\n     * @param {String}  str The string\r\n     * @param {Boolean} [raw] True to get the raw string, false to get the hex string\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.hash = function (str, raw) {\r\n        // Converts the string to utf8 bytes if necessary\r\n        // Then compute it using the binary function\r\n        return SparkMD5.hashBinary(toUtf8(str), raw);\r\n    };\r\n\r\n    /**\r\n     * Performs the md5 hash on a binary string.\r\n     *\r\n     * @param {String}  content The binary string\r\n     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.hashBinary = function (content, raw) {\r\n        var hash = md51(content),\r\n            ret = hex(hash);\r\n\r\n        return raw ? hexToBinaryString(ret) : ret;\r\n    };\r\n\r\n    // ---------------------------------------------------\r\n\r\n    /**\r\n     * SparkMD5 OOP implementation for array buffers.\r\n     *\r\n     * Use this class to perform an incremental md5 ONLY for array buffers.\r\n     */\r\n    SparkMD5.ArrayBuffer = function () {\r\n        // call reset to init the instance\r\n        this.reset();\r\n    };\r\n\r\n    /**\r\n     * Appends an array buffer.\r\n     *\r\n     * @param {ArrayBuffer} arr The array to be appended\r\n     *\r\n     * @return {SparkMD5.ArrayBuffer} The instance itself\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\r\n        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\r\n            length = buff.length,\r\n            i;\r\n\r\n        this._length += arr.byteLength;\r\n\r\n        for (i = 64; i <= length; i += 64) {\r\n            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\r\n        }\r\n\r\n        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Finishes the incremental computation, reseting the internal state and\r\n     * returning the result.\r\n     *\r\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\r\n        var buff = this._buff,\r\n            length = buff.length,\r\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            i,\r\n            ret;\r\n\r\n        for (i = 0; i < length; i += 1) {\r\n            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\r\n        }\r\n\r\n        this._finish(tail, length);\r\n        ret = hex(this._hash);\r\n\r\n        if (raw) {\r\n            ret = hexToBinaryString(ret);\r\n        }\r\n\r\n        this.reset();\r\n\r\n        return ret;\r\n    };\r\n\r\n    /**\r\n     * Resets the internal state of the computation.\r\n     *\r\n     * @return {SparkMD5.ArrayBuffer} The instance itself\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.reset = function () {\r\n        this._buff = new Uint8Array(0);\r\n        this._length = 0;\r\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Gets the internal state of the computation.\r\n     *\r\n     * @return {Object} The state\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.getState = function () {\r\n        var state = SparkMD5.prototype.getState.call(this);\r\n\r\n        // Convert buffer to a string\r\n        state.buff = arrayBuffer2Utf8Str(state.buff);\r\n\r\n        return state;\r\n    };\r\n\r\n    /**\r\n     * Gets the internal state of the computation.\r\n     *\r\n     * @param {Object} state The state\r\n     *\r\n     * @return {SparkMD5.ArrayBuffer} The instance itself\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.setState = function (state) {\r\n        // Convert string to buffer\r\n        state.buff = utf8Str2ArrayBuffer(state.buff, true);\r\n\r\n        return SparkMD5.prototype.setState.call(this, state);\r\n    };\r\n\r\n    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\r\n\r\n    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\r\n\r\n    /**\r\n     * Performs the md5 hash on an array buffer.\r\n     *\r\n     * @param {ArrayBuffer} arr The array buffer\r\n     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\r\n        var hash = md51_array(new Uint8Array(arr)),\r\n            ret = hex(hash);\r\n\r\n        return raw ? hexToBinaryString(ret) : ret;\r\n    };\r\n\r\n    return SparkMD5;\r\n}));\r\n});\r\n\r\nvar config = {\r\n  tempFilePath: '',\r\n  totalSize: 0,\r\n  fileName: '',\r\n  verifyUrl: '',\r\n  uploadUrl: '',\r\n  mergeUrl: '',\r\n  maxConcurrency: 5,\r\n  generateIdentifier: null,\r\n  chunkSize: 5 * 1024 * 1024,\r\n  maxMemory: 100 * 1024 * 1024,\r\n  query: '',\r\n  header: {},\r\n  testChunks: false,\r\n  chunkRetryInterval: 0,\r\n  maxChunkRetries: 0,\r\n  timeout: 10000,\r\n  successStatus: [200, 201, 202],\r\n  failStatus: [404, 415, 500, 501],\r\n  verbose: false\r\n};\r\n\r\nclass EventEmitter {\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n\r\n  on(event, listener) {\r\n    if (typeof this.events[event] !== 'object') {\r\n      this.events[event] = [];\r\n    }\r\n    this.events[event].push(listener);\r\n    return () => this.off(event, listener)\r\n  }\r\n\r\n  off(event, listener) {\r\n    if (typeof this.events[event] === 'object') {\r\n      const idx = this.events[event].indexOf(listener);\r\n      if (idx > -1) {\r\n        this.events[event].splice(idx, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  emit(event, ...args) {\r\n    if (typeof this.events[event] === 'object') {\r\n      this.events[event].forEach(listener => listener.apply(this, args));\r\n    }\r\n  }\r\n\r\n  once(event, listener) {\r\n    const remove = this.on(event, (...args) => {\r\n      remove();\r\n      listener.apply(this, args);\r\n    });\r\n  }\r\n}\r\n\r\nconst isFunction = x => typeof x === 'function';\r\n\r\nfunction promisify(func) {\r\n  if (!isFunction(func)) return func\r\n  return (args = {}) => new Promise((resolve, reject) => {\r\n    func(\r\n      Object.assign(args, {\r\n        success: resolve,\r\n        fail: reject\r\n      })\r\n    );\r\n  })\r\n}\r\n\r\nfunction addParams(url = '', params = {}) {\r\n  const parts = url.split('?');\r\n  const query = Object.keys(params).map(key => `${key}=${params[key]}`).join('&');\r\n  return query ? `${parts[0]}?${query}` : parts[0]\r\n}\r\n\r\nconst awaitWrap = (promise) => promise\r\n  .then(data => [null, data])\r\n  .catch(err => [err, null]);\r\n\r\nconst compareVersion = (v1, v2) => {\r\n  v1 = v1.split('.');\r\n  v2 = v2.split('.');\r\n  const len = Math.max(v1.length, v2.length);\r\n\r\n  while (v1.length < len) {\r\n    v1.push('0');\r\n  }\r\n  while (v2.length < len) {\r\n    v2.push('0');\r\n  }\r\n\r\n  for (let i = 0; i < len; i++) {\r\n    const num1 = parseInt(v1[i], 10);\r\n    const num2 = parseInt(v2[i], 10);\r\n\r\n    if (num1 > num2) {\r\n      return 1\r\n    } else if (num1 < num2) {\r\n      return -1\r\n    }\r\n  }\r\n\r\n  return 0\r\n};\r\n\r\nlogger.useDefaults({\r\n  defaultLevel: logger.OFF,\r\n  formatter(messages) {\r\n    const now = new Date();\r\n    const time = `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;\r\n    messages.unshift(time);\r\n    messages.unshift('[Uploader]');\r\n  }\r\n});\r\n\r\nconst fileManager = wx.getFileSystemManager();\r\nconst readFileAsync = promisify(fileManager.readFile);\r\nconst miniProgram = wx.getAccountInfoSync();\r\nconst systemInfo = wx.getSystemInfoSync();\r\nconst appId = miniProgram.appId;\r\nconst MB = 1024 * 1024;\r\n\r\nclass Uploader {\r\n  constructor(option = {}) {\r\n    if (option.verbose) logger.setLevel(logger.INFO);\r\n    logger.debug('construct option ', option);\r\n    this.config = Object.assign(config, option);\r\n    this.emitter = new EventEmitter();\r\n    this.totalSize = this.config.totalSize;\r\n    this.chunkSize = this.config.chunkSize;\r\n    this.tempFilePath = this.config.tempFilePath;\r\n    this.totalChunks = Math.ceil(this.totalSize / this.chunkSize);\r\n    this.maxLoadChunks = Math.floor(this.config.maxMemory / this.chunkSize);\r\n    this._event();\r\n  }\r\n\r\n  static isSupport() {\r\n    const version = systemInfo.SDKVersion;\r\n    return compareVersion(version, '2.10.0') >= 0\r\n  }\r\n\r\n  async upload() {\r\n    this._reset();\r\n\r\n    logger.info('start generateIdentifier');\r\n    // step1: 计算 identifier\r\n    try {\r\n      logger.time('[Uploader] generateIdentifier');\r\n      if (this.config.testChunks) {\r\n        this.identifier = await this.computeMD5();\r\n      } else {\r\n        this.identifier = this.generateIdentifier();\r\n      }\r\n      logger.timeEnd('[Uploader] generateIdentifier');\r\n      logger.debug('generateIdentifier ', this.identifier);\r\n    } catch (error) {\r\n      this.handleFail({\r\n        errCode: 10002,\r\n        errMsg: error.message\r\n      });\r\n      return\r\n    }\r\n    logger.info('generateIdentifier end');\r\n    // step2: 获取已上传分片\r\n    if (this.config.testChunks && this.config.verifyUrl) {\r\n      logger.info('start verify uploaded chunks');\r\n      logger.time('[Uploader] verifyRequest');\r\n      const [verifyErr, verifyResp] = await awaitWrap(this.verifyRequest());\r\n      logger.timeEnd('[Uploader] verifyRequest');\r\n      logger.debug('verifyRequest', verifyErr, verifyResp);\r\n      if (verifyErr) {\r\n        this.handleFail({\r\n          errCode: 20001,\r\n          errMsg: verifyErr.errMsg\r\n        });\r\n        return\r\n      }\r\n      const {\r\n        needUpload,\r\n        uploadedChunks,\r\n      } = verifyResp.data;\r\n      logger.info('verify uploaded chunks end');\r\n      // 秒传逻辑\r\n      // 找不到合成的文件\r\n      if (!needUpload) {\r\n        this.progress = 100;\r\n        this.timeRemaining = 0;\r\n        this.dispatchProgress();\r\n        this.emit('success', {\r\n          errCode: 0,\r\n          ...verifyResp.data\r\n        });\r\n        this.emit('complete', {\r\n          errCode: 0,\r\n          ...verifyResp.data\r\n        });\r\n        return\r\n      // 分片齐全，但没有合并\r\n      } else if (uploadedChunks.length === this.totalChunks) {\r\n        this.progress = 100;\r\n        this.timeRemaining = 0;\r\n        this.dispatchProgress();\r\n        this.emit('uploadDone');\r\n        return\r\n      } else {\r\n        this.chunksIndexNeedRead = this.chunksIndexNeedRead.filter(v => !uploadedChunks.includes(v));\r\n        this.chunksIndexNeedSend = this.chunksIndexNeedSend.filter(v => !uploadedChunks.includes(v));\r\n        this.uploadedChunks = uploadedChunks.sort();\r\n      }\r\n    }\r\n\r\n    this.chunksNeedSend = this.chunksIndexNeedSend.length;\r\n    this.sizeNeedSend = this.chunksNeedSend * this.chunkSize;\r\n    if (this.chunksIndexNeedSend.includes(this.totalChunks - 1)) {\r\n      this.sizeNeedSend -= (this.totalChunks * this.chunkSize - this.totalSize);\r\n    }\r\n\r\n    logger.debug(`\r\n      start upload\r\n        uploadedChunks: ${this.uploadedChunks},\r\n        chunksQueue: ${this.chunksQueue},\r\n        chunksIndexNeedRead: ${this.chunksIndexNeedRead},\r\n        chunksNeedSend: ${this.chunksIndexNeedSend},\r\n        sizeNeedSend: ${this.sizeNeedSend}\r\n    `);\r\n\r\n    logger.info('start upload chunks');\r\n    logger.time('[Uploader] uploadChunks');\r\n    // step3: 开始上传\r\n    this.isUploading = true;\r\n    this._upload();\r\n  }\r\n\r\n  _requestAsync(args = {}, callback) {\r\n    const {\r\n      chunkRetryInterval,\r\n      maxChunkRetries,\r\n      successStatus,\r\n      failStatus\r\n    } = this.config;\r\n\r\n    let retries = maxChunkRetries;\r\n    return new Promise((resolve, reject) => {\r\n      const doRequest = () => {\r\n        const task = wx.request({\r\n          ...args,\r\n          timeout: this.config.timeout,\r\n          success: (res) => {\r\n            const statusCode = res.statusCode;\r\n\r\n            // 标示成功的返回码\r\n            if (successStatus.includes(statusCode)) {\r\n              resolve(res);\r\n            // 标示失败的返回码\r\n            } else if (failStatus.includes(statusCode)) {\r\n              reject(res);\r\n            } else if (retries > 0) {\r\n              setTimeout(() => {\r\n                this.emit('retry', {\r\n                  statusCode,\r\n                  url: args.url\r\n                });\r\n                --retries;\r\n                doRequest();\r\n              }, chunkRetryInterval);\r\n            } else {\r\n              reject(res);\r\n            }\r\n          },\r\n          fail: (res) => {\r\n            reject(res);\r\n          }\r\n        });\r\n\r\n        if (isFunction(callback)) {\r\n          callback(task);\r\n        }\r\n      };\r\n\r\n      doRequest();\r\n    })\r\n  }\r\n\r\n  handleFail(e) {\r\n    if (this.isFail) return\r\n    logger.error('upload file fail: ', e);\r\n    this.isFail = true;\r\n    this.cancel();\r\n    this.emit('fail', e);\r\n    this.emit('complete', e);\r\n  }\r\n\r\n  _event() {\r\n    // step4: 发送合并请求\r\n    this.on('uploadDone', async () => {\r\n      logger.timeEnd('[Uploader] uploadChunks');\r\n      logger.info('upload chunks end');\r\n      this.isUploading = false;\r\n      logger.info('start merge reqeust');\r\n      logger.time('[Uploader] mergeRequest');\r\n      const [mergeErr, mergeResp] = await awaitWrap(this.mergeRequest());\r\n      logger.timeEnd('[Uploader] mergeRequest');\r\n      logger.info('merge reqeust end');\r\n      logger.debug('mergeRequest', mergeErr, mergeResp);\r\n      if (mergeErr) {\r\n        this.handleFail({\r\n          errCode: 20003,\r\n          errrMsg: mergeErr.errMsg\r\n        });\r\n        return\r\n      }\r\n      logger.info('upload file success');\r\n      this.emit('success', {\r\n        errCode: 0,\r\n        ...mergeResp.data\r\n      });\r\n      this.emit('complete', {\r\n        errCode: 0,\r\n        ...mergeResp.data\r\n      });\r\n    });\r\n  }\r\n\r\n  _upload() {\r\n    this.startUploadTime = Date.now();\r\n    this._uploadedSize = 0;\r\n\r\n    if (this.chunksQueue.length) {\r\n      const maxConcurrency = this.config.maxConcurrency;\r\n      for (let i = 0; i < maxConcurrency; i++) {\r\n        this.uploadChunk();\r\n      }\r\n    } else {\r\n      this.readFileChunk();\r\n    }\r\n  }\r\n\r\n  updateUploadSize(currUploadSize) {\r\n    this.uploadedSize += currUploadSize; // 总体上传大小，暂停后累计\r\n    this._uploadedSize += currUploadSize; // 上传大小，暂停后清空\r\n    const time = Date.now() - this.startUploadTime; // 当前耗时\r\n    const averageSpeed = this._uploadedSize / time; // B/ms\r\n    const sizeWaitSend = this.sizeNeedSend - this.uploadedSize; // 剩余需要发送的大小\r\n    this.timeRemaining = parseInt(sizeWaitSend / averageSpeed, 10); // 剩余时间\r\n    this.averageSpeed = parseInt(averageSpeed, 10) * 1000; // 平均速度 B/s\r\n    this.progress = parseInt(((this.uploadedSize * 100) / this.sizeNeedSend), 10);\r\n    this.dispatchProgress();\r\n  }\r\n\r\n  dispatchProgress() {\r\n    this.emit('progress', {\r\n      totalSize: this.totalSize,\r\n      progress: this.progress,\r\n      uploadedSize: this.uploadedSize,\r\n      averageSpeed: this.averageSpeed,\r\n      timeRemaining: this.timeRemaining\r\n    });\r\n  }\r\n\r\n  pause() {\r\n    logger.info('** pause **');\r\n    this.isUploading = false;\r\n    const abortIndex = Object.keys(this.uploadTasks).map(v => v * 1);\r\n    abortIndex.forEach(index => {\r\n      this.chunksIndexNeedRead.push(index);\r\n      this.uploadTasks[index].abort();\r\n    });\r\n    this.uploadTasks = {};\r\n  }\r\n\r\n  resume() {\r\n    logger.info('** resume **');\r\n    this.isUploading = true;\r\n    this._upload();\r\n  }\r\n\r\n  cancel() {\r\n    logger.info('** cancel **');\r\n    this.pause();\r\n    this._reset();\r\n  }\r\n\r\n  _reset() {\r\n    this.chunksIndexNeedRead = Array.from(Array(this.totalChunks).keys());\r\n    this.chunksIndexNeedSend = Array.from(Array(this.totalChunks).keys());\r\n    this.chunksNeedSend = this.totalChunks;\r\n    this.sizeNeedSend = this.totalSize;\r\n    this.identifier = '';\r\n    this.chunksSend = 0;\r\n    this.chunksQueue = [];\r\n    this.uploadTasks = {};\r\n    this.pUploadList = [];\r\n    this.uploadedChunks = [];\r\n    this.isUploading = false;\r\n    this.isFail = false;\r\n    this.progress = 0;\r\n    this.uploadedSize = 0;\r\n    this.averageSpeed = 0;\r\n    this.timeRemaining = Number.POSITIVE_INFINITY;\r\n    this.dispatchProgress();\r\n  }\r\n\r\n  readFileChunk() {\r\n    const {\r\n      tempFilePath,\r\n      chunkSize,\r\n      maxLoadChunks,\r\n      chunksQueue,\r\n      chunksIndexNeedRead,\r\n      totalSize\r\n    } = this;\r\n    const chunks = Math.min(chunksIndexNeedRead.length, maxLoadChunks - chunksQueue.length);\r\n    // 异步读取\r\n    logger.debug(`readFileChunk chunks: ${chunks}, chunksIndexNeedRead`, this.chunksIndexNeedRead);\r\n    for (let i = 0; i < chunks; i++) {\r\n      const index = chunksIndexNeedRead.shift();\r\n      const position = index * chunkSize;\r\n      const length = Math.min(totalSize - position, chunkSize);\r\n      if (this.isFail) break\r\n\r\n      readFileAsync({\r\n        filePath: tempFilePath,\r\n        position,\r\n        length\r\n      }).then(res => {\r\n        const chunk = res.data;\r\n        this.chunksQueue.push({\r\n          chunk,\r\n          length,\r\n          index\r\n        });\r\n        this.uploadChunk();\r\n        return null\r\n      }).catch(e => {\r\n        this.handleFail({\r\n          errCode: 10001,\r\n          errMsg: e.errMsg\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  uploadChunk() {\r\n    // 暂停中\r\n    if (!this.isUploading || this.isFail) return\r\n    // 没有更多数据了\r\n    if (!this.chunksQueue.length) return\r\n    // 达到最大并发度\r\n    if (Object.keys(this.uploadTasks).length === this.config.maxConcurrency) return\r\n\r\n    const {\r\n      chunk,\r\n      index,\r\n      length\r\n    } = this.chunksQueue.shift();\r\n\r\n    // 跳过已发送的分块\r\n    if (this.uploadedChunks.includes(index)) {\r\n      this.uploadChunk();\r\n      return\r\n    }\r\n    const {\r\n      uploadUrl,\r\n      query,\r\n      header\r\n    } = this.config;\r\n    const identifier = this.identifier;\r\n    const url = addParams(uploadUrl, {\r\n      ...query,\r\n      identifier,\r\n      index,\r\n      chunkSize: length,\r\n      fileName: this.config.fileName,\r\n      totalChunks: this.totalChunks,\r\n      totalSize: this.totalSize\r\n    });\r\n    logger.debug(`uploadChunk index: ${index}, lenght ${length}`);\r\n    logger.time(`[Uploader] uploadChunk index-${index}`);\r\n    this._requestAsync({\r\n      url,\r\n      data: chunk,\r\n      header: {\r\n        ...header,\r\n        'content-type': 'application/octet-stream'\r\n      },\r\n      method: 'POST',\r\n    }, (task) => {\r\n      this.uploadTasks[index] = task;\r\n    }).then(() => {\r\n      this.chunksSend++;\r\n      delete this.uploadTasks[index];\r\n      this.updateUploadSize(length);\r\n      logger.debug(`uploadChunk success chunksSend: ${this.chunksSend}`);\r\n      logger.timeEnd(`[Uploader] uploadChunk index-${index}`);\r\n      // 尝试继续加载文件\r\n      this.readFileChunk();\r\n      // 尝试继续发送下一条\r\n      this.uploadChunk();\r\n      // 所有分片发送完毕\r\n      if (this.chunksSend === this.chunksNeedSend) {\r\n        this.emit('uploadDone');\r\n      }\r\n      return null\r\n    }).catch(res => {\r\n      if (res.errMsg.includes('request:fail abort')) {\r\n        logger.info(`chunk index-${index} will be aborted`);\r\n      } else {\r\n        this.handleFail({\r\n          errCode: 20002,\r\n          errMsg: res.errMsg\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  emit(event, data) {\r\n    this.emitter.emit(event, data);\r\n  }\r\n\r\n  on(event, listenr) {\r\n    this.emitter.on(event, listenr);\r\n  }\r\n\r\n  off(event, listenr) {\r\n    this.emitter.off(event, listenr);\r\n  }\r\n\r\n  generateIdentifier() {\r\n    let identifier = '';\r\n    const generator = this.config.generateIdentifier;\r\n    if (isFunction(generator)) {\r\n      identifier = generator();\r\n    } else {\r\n      const uuid = `${appId}-${Date.now()}-${Math.random()}`;\r\n      identifier = sparkMd5.hash(uuid);\r\n    }\r\n    return identifier\r\n  }\r\n\r\n  async computeMD5() {\r\n    const {\r\n      tempFilePath,\r\n      totalSize,\r\n      chunkSize\r\n    } = this;\r\n\r\n    // 文件比内存限制小时，保存分片\r\n    const isltMaxMemory = totalSize < this.config.maxMemory;\r\n    const sliceSize = isltMaxMemory ? chunkSize : 10 * MB;\r\n    const sliceNum = Math.ceil(totalSize / sliceSize);\r\n    const spark = new sparkMd5.ArrayBuffer();\r\n    for (let i = 0; i < sliceNum; i++) {\r\n      const position = i * sliceSize;\r\n      const length = Math.min(totalSize - position, sliceSize);\r\n      // eslint-disable-next-line no-await-in-loop\r\n      const [readFileErr, readFileResp] = await awaitWrap(readFileAsync({\r\n        filePath: tempFilePath,\r\n        position,\r\n        length\r\n      }));\r\n\r\n      if (readFileErr) {\r\n        spark.destroy();\r\n        throw (new Error(readFileErr.errMsg))\r\n      }\r\n\r\n      const chunk = readFileResp.data;\r\n      if (isltMaxMemory) {\r\n        this.chunksQueue.push({\r\n          chunk,\r\n          length,\r\n          index: i\r\n        });\r\n      }\r\n      spark.append(chunk);\r\n    }\r\n    this.chunksIndexNeedRead = [];\r\n    const identifier = spark.end();\r\n    spark.destroy();\r\n    return identifier\r\n  }\r\n\r\n  async verifyRequest() {\r\n    const {\r\n      verifyUrl,\r\n      fileName\r\n    } = this.config;\r\n    const verifyResp = await this._requestAsync({\r\n      url: verifyUrl,\r\n      data: {\r\n        fileName,\r\n        identifier: this.identifier\r\n      }\r\n    });\r\n    return verifyResp\r\n  }\r\n\r\n  async mergeRequest() {\r\n    const {\r\n      mergeUrl,\r\n      fileName\r\n    } = this.config;\r\n    const mergeResp = await this._requestAsync({\r\n      url: mergeUrl,\r\n      data: {\r\n        fileName,\r\n        identifier: this.identifier\r\n      }\r\n    });\r\n    return mergeResp\r\n  }\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = Uploader;\r\n//# sourceMappingURL=uploader.js.map\r\n"]}