{"version":3,"sources":["spark-md5.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function (factory) {\r\n    if (typeof exports === 'object') {\r\n        // Node/CommonJS\r\n        module.exports = factory();\r\n    } else if (typeof define === 'function' && define.amd) {\r\n        // AMD\r\n        define(factory);\r\n    } else {\r\n        // Browser globals (with support for web workers)\r\n        var glob;\r\n\r\n        try {\r\n            glob = window;\r\n        } catch (e) {\r\n            glob = self;\r\n        }\r\n\r\n        glob.SparkMD5 = factory();\r\n    }\r\n}(function (undefined) {\r\n\r\n    \r\n\r\n    /*\r\n     * Fastest md5 implementation around (JKM md5).\r\n     * Credits: Joseph Myers\r\n     *\r\n     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\r\n     * @see http://jsperf.com/md5-shootout/7\r\n     */\r\n\r\n    /* this function is much faster,\r\n      so if possible we use it. Some IEs\r\n      are the only ones I know of that\r\n      need the idiotic second function,\r\n      generated by an if clause.  */\r\n    var add32 = function (a, b) {\r\n        return (a + b) & 0xFFFFFFFF;\r\n    },\r\n        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\r\n\r\n\r\n    function cmn(q, a, b, x, s, t) {\r\n        a = add32(add32(a, q), add32(x, t));\r\n        return add32((a << s) | (a >>> (32 - s)), b);\r\n    }\r\n\r\n    function md5cycle(x, k) {\r\n        var a = x[0],\r\n            b = x[1],\r\n            c = x[2],\r\n            d = x[3];\r\n\r\n        a += (b & c | ~b & d) + k[0] - 680876936 | 0;\r\n        a  = (a << 7 | a >>> 25) + b | 0;\r\n        d += (a & b | ~a & c) + k[1] - 389564586 | 0;\r\n        d  = (d << 12 | d >>> 20) + a | 0;\r\n        c += (d & a | ~d & b) + k[2] + 606105819 | 0;\r\n        c  = (c << 17 | c >>> 15) + d | 0;\r\n        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;\r\n        b  = (b << 22 | b >>> 10) + c | 0;\r\n        a += (b & c | ~b & d) + k[4] - 176418897 | 0;\r\n        a  = (a << 7 | a >>> 25) + b | 0;\r\n        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;\r\n        d  = (d << 12 | d >>> 20) + a | 0;\r\n        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;\r\n        c  = (c << 17 | c >>> 15) + d | 0;\r\n        b += (c & d | ~c & a) + k[7] - 45705983 | 0;\r\n        b  = (b << 22 | b >>> 10) + c | 0;\r\n        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;\r\n        a  = (a << 7 | a >>> 25) + b | 0;\r\n        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;\r\n        d  = (d << 12 | d >>> 20) + a | 0;\r\n        c += (d & a | ~d & b) + k[10] - 42063 | 0;\r\n        c  = (c << 17 | c >>> 15) + d | 0;\r\n        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;\r\n        b  = (b << 22 | b >>> 10) + c | 0;\r\n        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;\r\n        a  = (a << 7 | a >>> 25) + b | 0;\r\n        d += (a & b | ~a & c) + k[13] - 40341101 | 0;\r\n        d  = (d << 12 | d >>> 20) + a | 0;\r\n        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;\r\n        c  = (c << 17 | c >>> 15) + d | 0;\r\n        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;\r\n        b  = (b << 22 | b >>> 10) + c | 0;\r\n\r\n        a += (b & d | c & ~d) + k[1] - 165796510 | 0;\r\n        a  = (a << 5 | a >>> 27) + b | 0;\r\n        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;\r\n        d  = (d << 9 | d >>> 23) + a | 0;\r\n        c += (d & b | a & ~b) + k[11] + 643717713 | 0;\r\n        c  = (c << 14 | c >>> 18) + d | 0;\r\n        b += (c & a | d & ~a) + k[0] - 373897302 | 0;\r\n        b  = (b << 20 | b >>> 12) + c | 0;\r\n        a += (b & d | c & ~d) + k[5] - 701558691 | 0;\r\n        a  = (a << 5 | a >>> 27) + b | 0;\r\n        d += (a & c | b & ~c) + k[10] + 38016083 | 0;\r\n        d  = (d << 9 | d >>> 23) + a | 0;\r\n        c += (d & b | a & ~b) + k[15] - 660478335 | 0;\r\n        c  = (c << 14 | c >>> 18) + d | 0;\r\n        b += (c & a | d & ~a) + k[4] - 405537848 | 0;\r\n        b  = (b << 20 | b >>> 12) + c | 0;\r\n        a += (b & d | c & ~d) + k[9] + 568446438 | 0;\r\n        a  = (a << 5 | a >>> 27) + b | 0;\r\n        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;\r\n        d  = (d << 9 | d >>> 23) + a | 0;\r\n        c += (d & b | a & ~b) + k[3] - 187363961 | 0;\r\n        c  = (c << 14 | c >>> 18) + d | 0;\r\n        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;\r\n        b  = (b << 20 | b >>> 12) + c | 0;\r\n        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;\r\n        a  = (a << 5 | a >>> 27) + b | 0;\r\n        d += (a & c | b & ~c) + k[2] - 51403784 | 0;\r\n        d  = (d << 9 | d >>> 23) + a | 0;\r\n        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;\r\n        c  = (c << 14 | c >>> 18) + d | 0;\r\n        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;\r\n        b  = (b << 20 | b >>> 12) + c | 0;\r\n\r\n        a += (b ^ c ^ d) + k[5] - 378558 | 0;\r\n        a  = (a << 4 | a >>> 28) + b | 0;\r\n        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;\r\n        d  = (d << 11 | d >>> 21) + a | 0;\r\n        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;\r\n        c  = (c << 16 | c >>> 16) + d | 0;\r\n        b += (c ^ d ^ a) + k[14] - 35309556 | 0;\r\n        b  = (b << 23 | b >>> 9) + c | 0;\r\n        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;\r\n        a  = (a << 4 | a >>> 28) + b | 0;\r\n        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;\r\n        d  = (d << 11 | d >>> 21) + a | 0;\r\n        c += (d ^ a ^ b) + k[7] - 155497632 | 0;\r\n        c  = (c << 16 | c >>> 16) + d | 0;\r\n        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;\r\n        b  = (b << 23 | b >>> 9) + c | 0;\r\n        a += (b ^ c ^ d) + k[13] + 681279174 | 0;\r\n        a  = (a << 4 | a >>> 28) + b | 0;\r\n        d += (a ^ b ^ c) + k[0] - 358537222 | 0;\r\n        d  = (d << 11 | d >>> 21) + a | 0;\r\n        c += (d ^ a ^ b) + k[3] - 722521979 | 0;\r\n        c  = (c << 16 | c >>> 16) + d | 0;\r\n        b += (c ^ d ^ a) + k[6] + 76029189 | 0;\r\n        b  = (b << 23 | b >>> 9) + c | 0;\r\n        a += (b ^ c ^ d) + k[9] - 640364487 | 0;\r\n        a  = (a << 4 | a >>> 28) + b | 0;\r\n        d += (a ^ b ^ c) + k[12] - 421815835 | 0;\r\n        d  = (d << 11 | d >>> 21) + a | 0;\r\n        c += (d ^ a ^ b) + k[15] + 530742520 | 0;\r\n        c  = (c << 16 | c >>> 16) + d | 0;\r\n        b += (c ^ d ^ a) + k[2] - 995338651 | 0;\r\n        b  = (b << 23 | b >>> 9) + c | 0;\r\n\r\n        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;\r\n        a  = (a << 6 | a >>> 26) + b | 0;\r\n        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;\r\n        d  = (d << 10 | d >>> 22) + a | 0;\r\n        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;\r\n        c  = (c << 15 | c >>> 17) + d | 0;\r\n        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;\r\n        b  = (b << 21 |b >>> 11) + c | 0;\r\n        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;\r\n        a  = (a << 6 | a >>> 26) + b | 0;\r\n        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;\r\n        d  = (d << 10 | d >>> 22) + a | 0;\r\n        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;\r\n        c  = (c << 15 | c >>> 17) + d | 0;\r\n        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;\r\n        b  = (b << 21 |b >>> 11) + c | 0;\r\n        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;\r\n        a  = (a << 6 | a >>> 26) + b | 0;\r\n        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;\r\n        d  = (d << 10 | d >>> 22) + a | 0;\r\n        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;\r\n        c  = (c << 15 | c >>> 17) + d | 0;\r\n        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;\r\n        b  = (b << 21 |b >>> 11) + c | 0;\r\n        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;\r\n        a  = (a << 6 | a >>> 26) + b | 0;\r\n        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;\r\n        d  = (d << 10 | d >>> 22) + a | 0;\r\n        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;\r\n        c  = (c << 15 | c >>> 17) + d | 0;\r\n        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;\r\n        b  = (b << 21 | b >>> 11) + c | 0;\r\n\r\n        x[0] = a + x[0] | 0;\r\n        x[1] = b + x[1] | 0;\r\n        x[2] = c + x[2] | 0;\r\n        x[3] = d + x[3] | 0;\r\n    }\r\n\r\n    function md5blk(s) {\r\n        var md5blks = [],\r\n            i; /* Andy King said do it this way. */\r\n\r\n        for (i = 0; i < 64; i += 4) {\r\n            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\r\n        }\r\n        return md5blks;\r\n    }\r\n\r\n    function md5blk_array(a) {\r\n        var md5blks = [],\r\n            i; /* Andy King said do it this way. */\r\n\r\n        for (i = 0; i < 64; i += 4) {\r\n            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\r\n        }\r\n        return md5blks;\r\n    }\r\n\r\n    function md51(s) {\r\n        var n = s.length,\r\n            state = [1732584193, -271733879, -1732584194, 271733878],\r\n            i,\r\n            length,\r\n            tail,\r\n            tmp,\r\n            lo,\r\n            hi;\r\n\r\n        for (i = 64; i <= n; i += 64) {\r\n            md5cycle(state, md5blk(s.substring(i - 64, i)));\r\n        }\r\n        s = s.substring(i - 64);\r\n        length = s.length;\r\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        for (i = 0; i < length; i += 1) {\r\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\r\n        }\r\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\r\n        if (i > 55) {\r\n            md5cycle(state, tail);\r\n            for (i = 0; i < 16; i += 1) {\r\n                tail[i] = 0;\r\n            }\r\n        }\r\n\r\n        // Beware that the final length might not fit in 32 bits so we take care of that\r\n        tmp = n * 8;\r\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\r\n        lo = parseInt(tmp[2], 16);\r\n        hi = parseInt(tmp[1], 16) || 0;\r\n\r\n        tail[14] = lo;\r\n        tail[15] = hi;\r\n\r\n        md5cycle(state, tail);\r\n        return state;\r\n    }\r\n\r\n    function md51_array(a) {\r\n        var n = a.length,\r\n            state = [1732584193, -271733879, -1732584194, 271733878],\r\n            i,\r\n            length,\r\n            tail,\r\n            tmp,\r\n            lo,\r\n            hi;\r\n\r\n        for (i = 64; i <= n; i += 64) {\r\n            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\r\n        }\r\n\r\n        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\r\n        // containing the last element of the parent array if the sub array specified starts\r\n        // beyond the length of the parent array - weird.\r\n        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\r\n        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\r\n\r\n        length = a.length;\r\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        for (i = 0; i < length; i += 1) {\r\n            tail[i >> 2] |= a[i] << ((i % 4) << 3);\r\n        }\r\n\r\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\r\n        if (i > 55) {\r\n            md5cycle(state, tail);\r\n            for (i = 0; i < 16; i += 1) {\r\n                tail[i] = 0;\r\n            }\r\n        }\r\n\r\n        // Beware that the final length might not fit in 32 bits so we take care of that\r\n        tmp = n * 8;\r\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\r\n        lo = parseInt(tmp[2], 16);\r\n        hi = parseInt(tmp[1], 16) || 0;\r\n\r\n        tail[14] = lo;\r\n        tail[15] = hi;\r\n\r\n        md5cycle(state, tail);\r\n\r\n        return state;\r\n    }\r\n\r\n    function rhex(n) {\r\n        var s = '',\r\n            j;\r\n        for (j = 0; j < 4; j += 1) {\r\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\r\n        }\r\n        return s;\r\n    }\r\n\r\n    function hex(x) {\r\n        var i;\r\n        for (i = 0; i < x.length; i += 1) {\r\n            x[i] = rhex(x[i]);\r\n        }\r\n        return x.join('');\r\n    }\r\n\r\n    // In some cases the fast add32 function cannot be used..\r\n    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {\r\n        add32 = function (x, y) {\r\n            var lsw = (x & 0xFFFF) + (y & 0xFFFF),\r\n                msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n            return (msw << 16) | (lsw & 0xFFFF);\r\n        };\r\n    }\r\n\r\n    // ---------------------------------------------------\r\n\r\n    /**\r\n     * ArrayBuffer slice polyfill.\r\n     *\r\n     * @see https://github.com/ttaubert/node-arraybuffer-slice\r\n     */\r\n\r\n    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\r\n        (function () {\r\n            function clamp(val, length) {\r\n                val = (val | 0) || 0;\r\n\r\n                if (val < 0) {\r\n                    return Math.max(val + length, 0);\r\n                }\r\n\r\n                return Math.min(val, length);\r\n            }\r\n\r\n            ArrayBuffer.prototype.slice = function (from, to) {\r\n                var length = this.byteLength,\r\n                    begin = clamp(from, length),\r\n                    end = length,\r\n                    num,\r\n                    target,\r\n                    targetArray,\r\n                    sourceArray;\r\n\r\n                if (to !== undefined) {\r\n                    end = clamp(to, length);\r\n                }\r\n\r\n                if (begin > end) {\r\n                    return new ArrayBuffer(0);\r\n                }\r\n\r\n                num = end - begin;\r\n                target = new ArrayBuffer(num);\r\n                targetArray = new Uint8Array(target);\r\n\r\n                sourceArray = new Uint8Array(this, begin, num);\r\n                targetArray.set(sourceArray);\r\n\r\n                return target;\r\n            };\r\n        })();\r\n    }\r\n\r\n    // ---------------------------------------------------\r\n\r\n    /**\r\n     * Helpers.\r\n     */\r\n\r\n    function toUtf8(str) {\r\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\r\n            str = unescape(encodeURIComponent(str));\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    function utf8Str2ArrayBuffer(str, returnUInt8Array) {\r\n        var length = str.length,\r\n           buff = new ArrayBuffer(length),\r\n           arr = new Uint8Array(buff),\r\n           i;\r\n\r\n        for (i = 0; i < length; i += 1) {\r\n            arr[i] = str.charCodeAt(i);\r\n        }\r\n\r\n        return returnUInt8Array ? arr : buff;\r\n    }\r\n\r\n    function arrayBuffer2Utf8Str(buff) {\r\n        return String.fromCharCode.apply(null, new Uint8Array(buff));\r\n    }\r\n\r\n    function concatenateArrayBuffers(first, second, returnUInt8Array) {\r\n        var result = new Uint8Array(first.byteLength + second.byteLength);\r\n\r\n        result.set(new Uint8Array(first));\r\n        result.set(new Uint8Array(second), first.byteLength);\r\n\r\n        return returnUInt8Array ? result : result.buffer;\r\n    }\r\n\r\n    function hexToBinaryString(hex) {\r\n        var bytes = [],\r\n            length = hex.length,\r\n            x;\r\n\r\n        for (x = 0; x < length - 1; x += 2) {\r\n            bytes.push(parseInt(hex.substr(x, 2), 16));\r\n        }\r\n\r\n        return String.fromCharCode.apply(String, bytes);\r\n    }\r\n\r\n    // ---------------------------------------------------\r\n\r\n    /**\r\n     * SparkMD5 OOP implementation.\r\n     *\r\n     * Use this class to perform an incremental md5, otherwise use the\r\n     * static methods instead.\r\n     */\r\n\r\n    function SparkMD5() {\r\n        // call reset to init the instance\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Appends a string.\r\n     * A conversion will be applied if an utf8 string is detected.\r\n     *\r\n     * @param {String} str The string to be appended\r\n     *\r\n     * @return {SparkMD5} The instance itself\r\n     */\r\n    SparkMD5.prototype.append = function (str) {\r\n        // Converts the string to utf8 bytes if necessary\r\n        // Then append as binary\r\n        this.appendBinary(toUtf8(str));\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Appends a binary string.\r\n     *\r\n     * @param {String} contents The binary string to be appended\r\n     *\r\n     * @return {SparkMD5} The instance itself\r\n     */\r\n    SparkMD5.prototype.appendBinary = function (contents) {\r\n        this._buff += contents;\r\n        this._length += contents.length;\r\n\r\n        var length = this._buff.length,\r\n            i;\r\n\r\n        for (i = 64; i <= length; i += 64) {\r\n            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\r\n        }\r\n\r\n        this._buff = this._buff.substring(i - 64);\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Finishes the incremental computation, reseting the internal state and\r\n     * returning the result.\r\n     *\r\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.prototype.end = function (raw) {\r\n        var buff = this._buff,\r\n            length = buff.length,\r\n            i,\r\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            ret;\r\n\r\n        for (i = 0; i < length; i += 1) {\r\n            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\r\n        }\r\n\r\n        this._finish(tail, length);\r\n        ret = hex(this._hash);\r\n\r\n        if (raw) {\r\n            ret = hexToBinaryString(ret);\r\n        }\r\n\r\n        this.reset();\r\n\r\n        return ret;\r\n    };\r\n\r\n    /**\r\n     * Resets the internal state of the computation.\r\n     *\r\n     * @return {SparkMD5} The instance itself\r\n     */\r\n    SparkMD5.prototype.reset = function () {\r\n        this._buff = '';\r\n        this._length = 0;\r\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Gets the internal state of the computation.\r\n     *\r\n     * @return {Object} The state\r\n     */\r\n    SparkMD5.prototype.getState = function () {\r\n        return {\r\n            buff: this._buff,\r\n            length: this._length,\r\n            hash: this._hash.slice()\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Gets the internal state of the computation.\r\n     *\r\n     * @param {Object} state The state\r\n     *\r\n     * @return {SparkMD5} The instance itself\r\n     */\r\n    SparkMD5.prototype.setState = function (state) {\r\n        this._buff = state.buff;\r\n        this._length = state.length;\r\n        this._hash = state.hash;\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Releases memory used by the incremental buffer and other additional\r\n     * resources. If you plan to use the instance again, use reset instead.\r\n     */\r\n    SparkMD5.prototype.destroy = function () {\r\n        delete this._hash;\r\n        delete this._buff;\r\n        delete this._length;\r\n    };\r\n\r\n    /**\r\n     * Finish the final calculation based on the tail.\r\n     *\r\n     * @param {Array}  tail   The tail (will be modified)\r\n     * @param {Number} length The length of the remaining buffer\r\n     */\r\n    SparkMD5.prototype._finish = function (tail, length) {\r\n        var i = length,\r\n            tmp,\r\n            lo,\r\n            hi;\r\n\r\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\r\n        if (i > 55) {\r\n            md5cycle(this._hash, tail);\r\n            for (i = 0; i < 16; i += 1) {\r\n                tail[i] = 0;\r\n            }\r\n        }\r\n\r\n        // Do the final computation based on the tail and length\r\n        // Beware that the final length may not fit in 32 bits so we take care of that\r\n        tmp = this._length * 8;\r\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\r\n        lo = parseInt(tmp[2], 16);\r\n        hi = parseInt(tmp[1], 16) || 0;\r\n\r\n        tail[14] = lo;\r\n        tail[15] = hi;\r\n        md5cycle(this._hash, tail);\r\n    };\r\n\r\n    /**\r\n     * Performs the md5 hash on a string.\r\n     * A conversion will be applied if utf8 string is detected.\r\n     *\r\n     * @param {String}  str The string\r\n     * @param {Boolean} [raw] True to get the raw string, false to get the hex string\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.hash = function (str, raw) {\r\n        // Converts the string to utf8 bytes if necessary\r\n        // Then compute it using the binary function\r\n        return SparkMD5.hashBinary(toUtf8(str), raw);\r\n    };\r\n\r\n    /**\r\n     * Performs the md5 hash on a binary string.\r\n     *\r\n     * @param {String}  content The binary string\r\n     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.hashBinary = function (content, raw) {\r\n        var hash = md51(content),\r\n            ret = hex(hash);\r\n\r\n        return raw ? hexToBinaryString(ret) : ret;\r\n    };\r\n\r\n    // ---------------------------------------------------\r\n\r\n    /**\r\n     * SparkMD5 OOP implementation for array buffers.\r\n     *\r\n     * Use this class to perform an incremental md5 ONLY for array buffers.\r\n     */\r\n    SparkMD5.ArrayBuffer = function () {\r\n        // call reset to init the instance\r\n        this.reset();\r\n    };\r\n\r\n    /**\r\n     * Appends an array buffer.\r\n     *\r\n     * @param {ArrayBuffer} arr The array to be appended\r\n     *\r\n     * @return {SparkMD5.ArrayBuffer} The instance itself\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\r\n        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\r\n            length = buff.length,\r\n            i;\r\n\r\n        this._length += arr.byteLength;\r\n\r\n        for (i = 64; i <= length; i += 64) {\r\n            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\r\n        }\r\n\r\n        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Finishes the incremental computation, reseting the internal state and\r\n     * returning the result.\r\n     *\r\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\r\n        var buff = this._buff,\r\n            length = buff.length,\r\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            i,\r\n            ret;\r\n\r\n        for (i = 0; i < length; i += 1) {\r\n            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\r\n        }\r\n\r\n        this._finish(tail, length);\r\n        ret = hex(this._hash);\r\n\r\n        if (raw) {\r\n            ret = hexToBinaryString(ret);\r\n        }\r\n\r\n        this.reset();\r\n\r\n        return ret;\r\n    };\r\n\r\n    /**\r\n     * Resets the internal state of the computation.\r\n     *\r\n     * @return {SparkMD5.ArrayBuffer} The instance itself\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.reset = function () {\r\n        this._buff = new Uint8Array(0);\r\n        this._length = 0;\r\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Gets the internal state of the computation.\r\n     *\r\n     * @return {Object} The state\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.getState = function () {\r\n        var state = SparkMD5.prototype.getState.call(this);\r\n\r\n        // Convert buffer to a string\r\n        state.buff = arrayBuffer2Utf8Str(state.buff);\r\n\r\n        return state;\r\n    };\r\n\r\n    /**\r\n     * Gets the internal state of the computation.\r\n     *\r\n     * @param {Object} state The state\r\n     *\r\n     * @return {SparkMD5.ArrayBuffer} The instance itself\r\n     */\r\n    SparkMD5.ArrayBuffer.prototype.setState = function (state) {\r\n        // Convert string to buffer\r\n        state.buff = utf8Str2ArrayBuffer(state.buff, true);\r\n\r\n        return SparkMD5.prototype.setState.call(this, state);\r\n    };\r\n\r\n    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\r\n\r\n    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\r\n\r\n    /**\r\n     * Performs the md5 hash on an array buffer.\r\n     *\r\n     * @param {ArrayBuffer} arr The array buffer\r\n     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one\r\n     *\r\n     * @return {String} The result\r\n     */\r\n    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\r\n        var hash = md51_array(new Uint8Array(arr)),\r\n            ret = hex(hash);\r\n\r\n        return raw ? hexToBinaryString(ret) : ret;\r\n    };\r\n\r\n    return SparkMD5;\r\n}));\r\n"]}